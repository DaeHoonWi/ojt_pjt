package com.edsk.movie.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.edsk.movie.controller.ReviewController;
import com.edsk.movie.dao.ReviewCommentDAO;
import com.edsk.movie.dao.ReviewDAO;
import com.edsk.movie.dao.ReviewLikeDAO;
import com.edsk.movie.dto.ReviewCommentDTO;
import com.edsk.movie.dto.ReviewDTO;
import com.edsk.movie.dto.ReviewLikeDTO;

/**
 * @author 권아영
 */
@Service
public class ReviewServiceImpl implements ReviewService {

	private static final Logger logger = LoggerFactory.getLogger(ReviewServiceImpl.class);
	
	@Autowired
	public ReviewDAO reviewDAO;
	
	@Autowired
	public ReviewCommentDAO reviewCommentDAO;
	
	@Autowired
	public ReviewLikeDAO reviewLikeDAO; 
	
	
	/*Review*/
	
	// 모든 리뷰 리스트 조회
	@Override
	public List<ReviewDTO> selectReviewList() throws Exception {
		return reviewDAO.selectReviewList();
	}

	// 리뷰 번호(rNum)에 해당하는 리뷰 조회
	@Override
	public ReviewDTO selectReview(int rNum) throws Exception {
		return reviewDAO.selectReview(rNum);
	}
	
	// 리뷰 입력
	@Override
	public int insertReview(ReviewDTO dto) throws Exception {
		int insertResult = 1;
		insertResult = reviewDAO.insertReview(dto);
		logger.debug("insertResult="+insertResult);
		return insertResult;
	}

	// 리뷰 수정 
	@Override
	public int updateReview(ReviewDTO dto) throws Exception {
		int updateResult = 1;
		updateResult = reviewDAO.updateReview(dto);
		logger.debug("updateResult="+updateResult);
		return updateResult;
	}
	
	// 리뷰 조회수 증가(+1)
	@Override
	public int updateReviewR_COUNT(int rNum) throws Exception {
		int updateResult = 1;
		updateResult = reviewDAO.updateReviewR_COUNT(rNum);
		logger.debug("updateResult="+updateResult);
		return updateResult;
	}

	// 리뷰 추천수 증가(+1)
	@Override
	public int updateReviewR_Like(int rNum) throws Exception {
		int updateResult = 1;
		updateResult = reviewDAO.updateReviewR_Like(rNum);
		logger.debug("updateResult="+updateResult);
		return updateResult;
	}

	// 리뷰 삭제 
	@Override
	public int deleteReview(int rNum) throws Exception {
		int deleteResult = 1;
		deleteResult = reviewDAO.deleteReview(rNum);
		logger.debug("deleteResult="+deleteResult);
		return deleteResult;
	}

	
	/*ReviewComment*/
	
	// 리뷰 번호(rNum)에 해당하는 리뷰 댓글 리스트 조회
	@Override
	public List<ReviewCommentDTO> selectReviewCommentList(int rNum) throws Exception {
		return reviewCommentDAO.selectReviewCommentList(rNum);
	}
	
	// 리뷰 댓글 삽입
	@Override
	public int insertReviewComment(ReviewCommentDTO dto) throws Exception {
		int insertResult = 0;
		insertResult= reviewCommentDAO.insertReviewComment(dto);
		logger.debug("insertResult="+insertResult);
		return insertResult;
	}

	// 리뷰 댓글 수정
	@Override
	public int updateReviewComment(ReviewCommentDTO dto) throws Exception {
		int updateResult = 0;
		updateResult= reviewCommentDAO.updateReviewComment(dto);
		logger.debug("updateResult="+updateResult);
		return updateResult;
	}

	// 리뷰 댓글 삭제
	@Override
	public int deleteReviewComment(int rcNum) throws Exception {
		int deleteResult = 0;
		deleteResult= reviewCommentDAO.deleteReviewComment(rcNum);		
		logger.debug("deleteResult="+deleteResult);
		return deleteResult;
	}


	/*ReviewLike*/
	
	// 해당 리뷰글에 대한 회원의 추천 여부 확인 (0: 추천 하지 않았음. 1: 이미 추천 했음)
	@Override
	public int selectReviewLike(ReviewLikeDTO dto) throws Exception {
		return reviewLikeDAO.selectReviewLike(dto);
	}
	
	// 해당 리뷰에 대해 추천. 
	// return을 boolean으로 만든 이유는, return값이 true일 때에만 다음 처리(updateReviewR_Like)를 하도록 만들기 위한 것. 
	@Override
	public boolean insertReviewLike(ReviewLikeDTO dto) throws Exception {
		reviewLikeDAO.insertReviewLike(dto);
		return true;		
	}





}
